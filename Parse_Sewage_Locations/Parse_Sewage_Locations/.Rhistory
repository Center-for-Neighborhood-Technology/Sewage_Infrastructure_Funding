plot(percentile, refrigerator_percent)
abline(fit, col="blue")
fit<- lm(refrigerator_percent~poly(percentile, 2, raw=True))
fit<- lm(refrigerator_percent~poly(percentile, 2, raw=TRUE))
plot(percentile, refrigerator_percent)
abline(fit, col="blue")
fit<- lm(refrigerator_percent~poly(percentile, 3, raw=TRUE))
plot(percentile, refrigerator_percent)
abline(fit, col="blue")
fit<- lm(refrigerator_percent~poly(percentile, 4, raw=TRUE))
plot(percentile, refrigerator_percent)
abline(fit, col="blue")
loess(refrigerator_percent~percentile)
lo <- loess(refrigerator_percent~percentile)
plot(percentile, refrigerator_percent)
lines(predict(lo), col="blue")
lines(predict(lo), col="blue", lwd=2)
percentile <- brazil4$percentile2
refrigerator_percent <- brazil4$refrigerator
lo <- loess(refrigerator_percent~percentile)
##create the graph
plot(percentile, refrigerator_percent)
lines(predict(lo), col="blue", lwd=2)
View(electricity.rural.data)
electricity.rural.data %>% group_by(choice) %>% summarise(marketshare=sum(choice_dummy))
tbl <- with(electricity.rural.data, table(electricity.rural.data %>% group_by(choice) %>% summarise(marketshare=sum(choice_dummy))))
barplot(tbl)
atbl <- electricity.rural.data %>% group_by(choice) %>% summarise(marketshare=sum(choice_dummy))
atbl
chosen_table <- electricity.rural.data %>% filter(choice_dummy == 1)
tbl <- with(chosen_table, table(choice))
barplot(tbl)
barplot(tbl)
scale_y_continuous(labels=percent)
summary(tbl)
tbl
available <- chosen_table %>% filter(avail==0)
tbl <- with(available, table(choice))
barplot(tbl)
tbl
logit <- glm(choice_dummy ~price + peakhours + load + avail, data=electricity.rural.data)
summary(logit)
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps4_data.csv")
library(dplyr)
library(knitr)
library(readr)
library(readxl)
library(rmarkdown)
library(rvest)
library(xml2)
library(tidyr)
library(sf)
library(ggplot2)
library(maptools)
library(rgdal)
library(plyr)
library(MatchIt)
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps4_data.csv")
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps_4_data.csv")
View(data)
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps_4_data.csv") %>% filter(drop_na)
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps_4_data.csv") %>% filter(air_quality_regulation_year > 0)
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps_4_data.csv", colClasses = c("double", "double","double","double"))
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps_4_data.csv", col_types = cols(.default="double"))
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps_4_data.csv", col_types = cols(.default=col_double()))
View(data)
colnames(data)
replace(data, data$air_quality_regulation_year==na, 9999)
data$air_quality_regulation_year
replace(data, data$air_quality_regulation_year==NA, 9999)
replace(data, is.na(data$air_quality_regulation_year), 9999)
mutate_all(~replace(data, is.na(data$air_quality_regulation_year),0))
mutate_all(~replace(data, is.na(air_quality_regulation_year),0))
mutate_all(~replace(data, is.na(data),0))
data[is.na(air_quality_regulation_year)] <- 9999
data[is.na(data$air_quality_regulation_year)] <- 9999
data[is.na(data)] <- 9999
View(data)
data$ear - data$air_quality_regulation_year
data$year - data$air_quality_regulation_year
data$treatment_year <- data$years_to_treat > 0
data$years_to_treat <- data$year - data$air_quality_regulation_year
data$treatment_year <- data$years_to_treat > 0
View(data)
treatment_year
data$treatment_year
for(i in nrow(data$treatment_year)) {if(x = TRUE) {1} else if(x = FALSE) {0}
for(i in nrow(data$treatment_year)) {if(x == TRUE) {1} else if(x == FALSE) {0}
}
data$treatment_year
data$treatment_year <- ifelse(data$years_to_treat > 0, 1, 0)
data$treatment_year
lm(data$particulate_matter~data$treatment_year*data$years_to_treat+factor(data$year)+factor(data$municipality_id))
regAll <- lm(data$particulate_matter~data$treatment_year*data$years_to_treat+factor(data$year)+factor(data$municipality_id))
summary(regAll)
avgComp <- lm(particulate_matter~treatment_year,data=data)
summary(avgComp)
data2004 <- data %>% filter(air_quality_regulation_year %in% c(2004))
View(data2004)
reg2004 <- lm(particulate_matter~treatment_year*years_to_treat,data=data2004)
summary(reg2004)
plot(data2004$year, data2004$particulate_matter)
plot(data2004$year, mean(data2004$particulate_matter))
ggplot(data2004, aes(x=factor(year), y=particulate_matter)) + stat_summary(fun.y="mean", geom="line")
ggplot(data2004, aes(x=factor(year), y=particulate_matter)) + stat_summary(fun="mean", geom="line")
ggplot(data2004, aes(x=factor(year), y=particulate_matter))
ggplot(data2004, aes(x=year, y=particulate_matter)) + stat_summary(fun.y="mean", geom="line")
ggplot(data2004, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
dataControl <- data %>% filter(air_quality_regulation_year %in% c(9999))
ggplot(dataControl, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
abline(plot2004, col="blue")
plot2004 <- ggplot(data2004, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
ggplot(dataControl, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
abline(plot2004, col="blue")
dataControl <- data %>% filter(air_quality_regulation_year %in% c(9999))
##plot particulate matter for control
ggplot(dataControl, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
abline(plot2004, col="blue")
dataControl <- data %>% filter(air_quality_regulation_year %in% c(9999))
View(dataControl)
ggplot(dataControl, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
ggplot(dataControl, aes(x=dataControl$year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
data2004 <- data %>% filter(air_quality_regulation_year %in% c(2006))
data2006 <- data %>% filter(air_quality_regulation_year %in% c(2006))
data2004 <- data %>% filter(air_quality_regulation_year %in% c(2004))
ggplot(data2006, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
View(data2006)
ggplot(dataControl, aes(x=year, y=particulate_matter))
ggplot(dataControl, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
data2006Control <- data %>% filter(air_quality_regulation_year %in% c(2006, 9999))
Vide(data2006Control)
View(data2006Control)
simpReg <- lm(particulate_matter~treatment_year,data=data2006Control)
simpReg(avgComp)
Summary(simpReg)
summary(simpReg)
unique(data$air_quality_regulation_year)
data2004 <- data %>% filter(air_quality_regulation_year %in% c(2004))
plot2004 <- ggplot(data2004, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
dataControl <- data %>% filter(air_quality_regulation_year %in% c(9999))
ggplot(dataControl, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
data2006 <- data %>% filter(air_quality_regulation_year %in% c(2006))
plot2006 <- ggplot(data2006, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
View(plot2006)
plot(plot2006)
abline(dataControl, col ="blue")
ggplot(data2002, aes(x=year, y=particulate_matter, color=air_quality_regulation_year)) + stat_summary(fun="mean", geom="line")
ggplot(data, aes(x=year, y=particulate_matter, color=air_quality_regulation_year)) + stat_summary(fun="mean", geom="line")
ggplot(data, aes(x=year, y=particulate_matter, color=air_quality_regulation_year))
data_long <- melt(data, id="year")
library(reshape2)
data_long <- melt(data, id="year")
data_long <- melt(data, id="year")
ggplot(data=data_long, aes(x=year, y=particulate_matter, color=air_quality_regulation_year))
View(data_long)
plotControl <- ggplot(dataControl, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
ggarrange(plot2006, plotControl)
library(ggpubr)
data2006 <- data %>% filter(air_quality_regulation_year %in% c(2006))
plot2006 <- ggplot(data2006, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
plot(plot2006,plotControl)
plot(plot2006)
ttest <- t.test(data2006$particulate_matter, dataControl$particulate_matter)
summart(ttest)
summary(ttest)
View(ttest)
t.test(data2006$particulate_matter, dataControl$particulate_matter)
simpReg <- lm(particulate_matter~treatment_year,data=data2006Control)
summary(simpReg)
simpReg <- lm(particulate_matter~treatment_year*years_to_treat,data=data2006Control)
summary(simpReg)
feReg <- lm(particulate_matter~treatment_year*years_to_treat+factor(data$year)+factor(data$municipality_id,data=data2006Control)
symmary(feReg)
summary(feReg)
feReg <- lm(particulate_matter~treatment_year*years_to_treat+factor(year)+factor(municipality_id),data=data2006Control)
summary(feReg)
plot(data2002, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
plot(data2006, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
data2002 <- data %>% filter(air_quality_regulation_year %in% c(2002))
data2003 <- data %>% filter(air_quality_regulation_year %in% c(2003))
data2005 <- data %>% filter(air_quality_regulation_year %in% c(2005))
data2007 <- data %>% filter(air_quality_regulation_year %in% c(2007))
plot2002 <- ggplot(data2002, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
plot2003 <- ggplot(data2003, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
plot2005 <- ggplot(data2005, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
plot2007 <- ggplot(data2007, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
plot(c(plot2002, plot2003))
plot(plot2002)
plot(plot2003)
plot(plot2004)
plot(plot2005)
plot(plot2006)
plot(plot2007)
dataClean <- data %>% filter(!air_quality_regulation_year %in% c(2006))
dataClean <- data %>% filter(!air_quality_regulation_year %in% c(2006))
##I AM GOING TO NEED THIS FOR A LATER QUESTION
##now we run panel fixed effects regression
panelRegClean <- lm(particulate_matter~treatment_year+factor(year)+factor(municipality_id), data=dataClean)
summary(panelRegClean)
##now we run the regression we described in 5
esRegClean <- lm(particulate_matter~treatment_year*years_to_treat+factor(year)+factor(municipality_id), data=dataClean)
summary(esRegClean)
unique(data$year)
unique(data$air_quality_regulation_year)
ggplot(data, aes(x=year, y=particulate_matter, color=air_quality_regulation_year))
ggplot(data, aes(x=year, y=particulate_matter))
View(data)
plot(x=year, y=air_quality_regulation_year, data=data)
plot(x=data$year, y=data$air_quality_regulation_year)
plot(x=data$year, y=data$particulate_matter)
plot(x=data$year, y=data$particulate_matter, color=data$air_quality_regulation_year)
?plot
plot(x=data$year, y=data$particulate_matter, col=data$air_quality_regulation_year)
plot(x=data$year, y=data$particulate_matter, col=data$air_quality_regulation_year) + stat_summary(fun="mean", geom="line")
ggplot(data, aes(x=year, y=particulate_matter, col=air_quality_regulation_year))
plot(x=data$year, y=data$particulate_matter, col=data$air_quality_regulation_year) + stat_summary(fun="mean", geom="line")
ggplot(aes(x=data$year, y=data$particulate_matter, col=data$air_quality_regulation_year))
ggplot(data, aes(x=data$year, y=data$particulate_matter, col=data$air_quality_regulation_year))
ggplot(data, aes(x=data$year, y=data$particulate_matter, col=data$air_quality_regulation_year))+ stat_summary(fun="mean", geom="line")
ggplot(data, aes(x=year, y=particulate_matter, col=air_quality_regulation_year))+ stat_summary(fun="mean", geom="line")
ggplot(data, aes(x=year, y=particulate_matter, color=air_quality_regulation_year))+ stat_summary(fun="mean", geom="line")
plot(x=data$year, y=data$particulate_matter, col=data$air_quality_regulation_year)
plot(x=data$year, y=mean(data$particulate_matter), col=data$air_quality_regulation_year)
set.seed(1234)
# predicts + interval
newx <- seq(min(dataClean$particulate_matter), max(dataClean$particulate_matter), length.out=100)
preds <- predict(esRegClean, newdata = data.frame(x=newx),
interval = 'confidence')
# plot
plot(esRegClean)
lines(newx, preds[ ,2], lty = 'dashed', col = 'red')
esRegClean <- lm(particulate_matter~treatment_year*years_to_treat+factor(year)+factor(municipality_id), data=dataClean)
summary(esRegClean)
2 + 2
2 + 2
# import data
sales <- read_csv("data/property_sales.csv")
# first five rows of fake data
head(x = sales, n = 5)
# import data
sales <- read_csv("C:/Users/eespu/OneDrive/Desktop/R Course/building-first-r-analytics-solution/04/demos/demos/after/property_sales/data/property_sales.csv")
# needed for next steps editing
library(tidyverse)
# import data
sales <- read_csv("data/property_sales.csv")
# import data
sales <- read_csv("data/property_sales.csv")
library(tidyverse)
# generate some fake data that looks like the real data
sales <- data.frame(
neighborhood = c("Peaceful Glen", "Peaceful Glen", "Peaceful Glen",
"Peaceful Glen", "Pleasant Valley", "Pleasant Valley", "Pleasant Valley",
"Pleasant Valley", "Pleasant Valley", "Pleasant Valley"),
property_class = c("Dwelling", "Dwelling", "Mobile Home",
"Mobile Home", "Commercial", "Commercial", "Dwelling", "Dwelling",
"Mobile Home", "Mobile Home"),
sales_price = c(229900, 349900, 235000, 290000, 3400000, 940250,
510000, 429382, 90000, 40000)
)
# first five rows of fake data
head(x = sales, n = 5)
# number of rows of fake data
total_sales <- nrow(sales)
total_sales
# keep just "Dwelling" sales
dwelling_sales <- filter(sales,
property_class == "Dwelling")
# percentage of sales that were dwellings
(nrow(dwelling_sales) / total_sales) * 100
# average price by neighborhood
dwelling_sales %>%
group_by(neighborhood) %>%
summarize(
n_sales = n(),
mean_price = mean(sales_price),
median_price = median(sales_price)
) %>%
arrange(median_price)
# plot all sale prices by neighborhood
dwelling_sales %>%
ggplot(aes(sales_price)) +
geom_histogram() +
scale_x_log10(labels = scales::label_dollar()) +
facet_wrap(~ neighborhood, scale = "free_y") +
labs(
x = "Sales price",
y = "Number of sales"
)
?c
total_sales
sales
View(sales)
# keep just "Dwelling" sales
dwelling_sales <- filter(sales,
property_class == "Dwelling")
View(dwelling_sales)
nrow(dwelling_sales)
nrow(dwelling_sales)/total_sales
nrow(dwelling_sales)/total_sales * 100
# generate some fake data that looks like the real data
sales <- data.frame(
neighborhood = c("Peaceful Glen", "Peaceful Glen", "Peaceful Glen",
"Peaceful Glen", "Pleasant Valley", "Pleasant Valley", "Pleasant Valley",
"Pleasant Valley", "Pleasant Valley", "Pleasant Valley"),
property_class = c("Dwelling", "Dwelling", "Mobile Home",
"Mobile Home", "Commercial", "Commercial", "Dwelling", "Dwelling",
"Mobile Home", "Mobile Home"),
sales_price = c(229900, 349900, 235000, 290000, 3400000, 940250,
510000, 429382, 90000, 40000)
)
# first five rows of fake data
head(x = sales, n = 5)
# number of rows of fake data
total_sales <- nrow(sales)
total_sales
# keep just "Dwelling" sales
dwelling_sales <- filter(sales,
property_class == "Dwelling")
# percentage of sales that were dwellings
(nrow(dwelling_sales) / total_sales) * 100
# average price by neighborhood
dwelling_sales %>%
group_by(neighborhood) %>%
summarize(
n_sales = n(),
mean_price = mean(sales_price),
median_price = median(sales_price)
) %>%
arrange(median_price)
# plot all sale prices by neighborhood
dwelling_sales %>%
ggplot(aes(sales_price)) +
geom_histogram() +
scale_x_log10(labels = scales::label_dollar()) +
facet_wrap(~ neighborhood, scale = "free_y") +
labs(
x = "Sales price",
y = "Number of sales"
)
source('C:/Users/eespu/OneDrive/Desktop/R Course/building-first-r-analytics-solution/04/demos/demos/before/summarize_sales.R')
source('C:/Users/eespu/OneDrive/Desktop/R Course/building-first-r-analytics-solution/04/demos/demos/before/summarize_sales.R')
install.packages(c("bayesAB", "pwr"))
library(bayesAB)
library(pwr)
#use a simple baysean test
ab_test <- prop.test(c(500, 545), c(1000, 1000))
ab_test
#give the names of different tests
names(ab_test)
#entering in the up-front probabilities
prior_prob_A <- ab_test$estimate[1]
prior_prob_B <- ab_test$estimate[2]
prior_prob_A
prior_prob_B
#model the traffic to our web pages
A_traffic <- rbinom(1000, 1, prior_prob_A)
B_traffic <- rbinom(1000, 1, prior_prob_B)
#turn our data into a list and then a data frame
A <- c(A_traffic)
B <- c(B_traffic)
df <- data.frame(A, B)
head(df)
#frequency of when a user clicked through or not
table(df$A)
table(df$B)
library(ggplot2)
#graph the traffic to the different web pages
options(repr.plot.width = 6, repr.plot.height = 4)
ggplot(data = df, aes(factor(x=A), fill = I('steelblue'))) +
geom_bar() +
ggtitle("Count of 0's and 1's for version A") +
xlab('Digits') +
ylab('Count')
ggplot(data = df, aes(factor(x=B), fill = I('darkgreen'))) +
geom_bar() +
ggtitle("Count of 0's and 1's for version B") +
xlab('Digits') +
ylab('Count')
#plot the beta distribution
plotBeta(10,20)
#plot the beta distribution
plotBeta(100,200)
#plot the beta distribution
plotBeta(81,219)
library(bayesAB)
library(pwr)
library(ggplot2)
#use a simple baysean test
ab_test <- prop.test(c(500, 545), c(1000, 1000))
ab_test
#give the names of different tests
names(ab_test)
#entering in the up-front probabilities
prior_prob_A <- ab_test$estimate[1]
prior_prob_B <- ab_test$estimate[2]
prior_prob_A
prior_prob_B
#model the traffic to our web pages
A_traffic <- rbinom(1000, 1, prior_prob_A)
B_traffic <- rbinom(1000, 1, prior_prob_B)
#turn our data into a list and then a data frame
A <- c(A_traffic)
B <- c(B_traffic)
df <- data.frame(A, B)
head(df)
#frequency of when a user clicked through or not
table(df$A)
table(df$B)
#graph the traffic to the different web pages
options(repr.plot.width = 6, repr.plot.height = 4)
ggplot(data = df, aes(factor(x=A), fill = I('steelblue'))) +
geom_bar() +
ggtitle("Count of 0's and 1's for version A") +
xlab('Digits') +
ylab('Count')
ggplot(data = df, aes(factor(x=B), fill = I('darkgreen'))) +
geom_bar() +
ggtitle("Count of 0's and 1's for version B") +
xlab('Digits') +
ylab('Count')
#plot the beta distribution
plotBeta(81,219)
AB1 <- bayesTest(A_traffic,
B_traffic,
priors = c('alpha' = 81, 'beta' = 219),
distribution = 'bernoulli')
print(AB1)
summary(AB1)
#the probability in the summary can tell us the probability
#that A is "better" than B
plot(AB1)
#do the same but change priors
AB1 <- bayesTest(A_traffic,
B_traffic,
priors = c('alpha' = 10, 'beta' = 20),
distribution = 'bernoulli')
distribution = 'bernoulli')
#do the same but change priors
AB1 <- bayesTest(A_traffic,
B_traffic,
priors = c('alpha' = 10, 'beta' = 20),
distribution = 'bernoulli')
AB1 <- bayesTest(A_traffic,
B_traffic,
priors = c('alpha' = 81, 'beta' = 219),
distribution = 'bernoulli')
#do the same but change priors
AB2 <- bayesTest(A_traffic,
B_traffic,
priors = c('alpha' = 10, 'beta' = 20),
distribution = 'bernoulli')
print(AB2)
summary(AB2)
plot(AB2)
#change the numbers
A_pois <- rpois(500, 6.3)
B_pois <- rpois(500, 6.1)
plotGamma(33,6)
AB2_1 <- bayesTest(A_pois, B_pois,
priors = c("shape" = 33, "rate" = 6),
n_samples = 1e5,
distribution = "poisson")
print(AB2_1)
summary(AB2_1)
plot(AB2_1)
setwd('C:/Users/eespu/CNT/Sewage_Infrastructure_Funding/Parse_Sewage_Locations/Parse_Sewage_Locations')
getwd
getwd()
library(ggplot2)
dollars_per_km <- read_csv('dollars_per_km.csv')
library(readr)
library(ggplot2)
dollars_per_km <- read_csv('dollars_per_km.csv')
dpkm_ssrc <- dollars_per_km %>% filter("project_group" = "sewer system replacement and construction")
dpkm_ssrc <- dollars_per_km %>% filter(project_group == "sewer system replacement and construction")
library(dplyr)
dpkm_ssrc <- dollars_per_km %>% filter(project_group == "sewer system replacement and construction")
dpkm_sl <- dollars_per_km %>% filter(project_group == "sewer lining")
plot(project_number, dollars_per_km_four_year, data=dpkm_ssrc)
View(dpkm_sl)
View(dpkm_sl)
View(dpkm_ssrc)
View(dpkm_ssrc)
plot(dpkm_ssrc$project_number, dpkm_ssrc$dollars_per_km_four_year)
plot(dpkm_ssrc$dollars_per_km_four_year, dpkm_ssrc$project_number)
hist(dpkm_ssrc$dollars_per_km_four_year)
hist(dpkm_ssrc$dollars_per_km_total)
hist(dpkm_sl$dollars_per_km_four_year)
hist(dpkm_sl$dollars_per_km_total)
boxplot(dpkm_ssrc$dollars_per_km_four_year)
boxplot(dpkm_ssrc$dollars_per_km_total)
boxplot(dpkm_sl$dollars_per_km_four_year)
boxplot(dpkm_sl$dollars_per_km_total)
hist(dpkm_ssrc$dollars_per_km_four_year)
hist(dpkm_ssrc$dollars_per_km_four_year)
boxplot(dpkm_ssrc$dollars_per_km_four_year)
hist(dpkm_ssrc$dollars_per_km_total)
boxplot(dpkm_ssrc$dollars_per_km_total)
hist(dpkm_sl$dollars_per_km_four_year)
boxplot(dpkm_sl$dollars_per_km_four_year)
hist(dpkm_sl$dollars_per_km_total)
boxplot(dpkm_sl$dollars_per_km_total)
hist(dpkm_ssrc$dollars_per_km_four_year)
hist(dpkm_ssrc$dollars_per_km_four_year, xlim = c(0,10000000))
hist(dpkm_ssrc$dollars_per_km_four_year, xlim = c(0,10000000), bins =50)
hist(dpkm_ssrc$dollars_per_km_four_year, xlim = c(0,10000000), breaks=50)
x <- subset(dpkm_ssrc, dollars_per_km < 10000000)
hist(x$dollars_per_km_four_year, xlim = c(0,10000000), breaks=50)
dpkm_ssrc <- dollars_per_km %>% filter(project_group == "sewer system replacement and construction", dollars_per_km < 10000000)
hist(dpkm_ssrc$dollars_per_km_four_year, xlim = c(0,10000000), breaks=50)
boxplot(dpkm_ssrc$dollars_per_km_four_year)
hist(dpkm_sl$dollars_per_km_four_year)
